# memory-static:
#   extends: .dedicated-no-docs-no-db-pull-cache-job
#   script:
#     # Uses two different reports from the 'derailed_benchmars' gem.

#     # Loads each of gems in the Gemfile and checks how much memory they consume when they are required.
#     # 'derailed_benchmarks' internally uses 'get_process_mem'
#     - scripts/memory-static 'tmp/memory_static_full_report.txt' 'tmp/memory_static_metrics.txt'

#     # Outputs detailed information about objects created while gems are loaded.
#     # 'derailed_benchmarks' internally uses 'memory_profiler'
#     - scripts/memory-static-objects 'tmp/memory_static_objects_full_report.txt' 'tmp/memory_static_metrics.txt'
#   artifacts:
#     paths:
#       - tmp/memory_static_full_report.txt
#       - tmp/memory_static_objects_full_report.txt
#       - tmp/memory_static_metrics.txt
#     reports:
#       metrics: tmp/memory_static_metrics.txt

.use-pg: &use-pg
  services:
    - name: postgres:9.6
      command: ["postgres", "-c", "fsync=off", "-c", "synchronous_commit=off", "-c", "full_page_writes=off"]
      alias: postgres
    - name: redis:alpine
      alias: redis

# for now, I copied the config from frontend jobs (they also use production env)
memory-on-boot:
  extends: .dedicated-runner
  <<: *use-pg
  image: dev.gitlab.org:5005/gitlab/gitlab-build-images:ruby-2.6.3-git-2.21-chrome-73.0-node-12.x-yarn-1.16-graphicsmagick-1.3.29-docker-18.06.1
  variables:
    NODE_ENV: "production"
    RAILS_ENV: "production"
    SETUP_DB: "false" # TODO: change to true
    SKIP_STORAGE_VALIDATION: "true"
    WEBPACK_REPORT: "true"
    # we override the max_old_space_size to prevent OOM errors
    NODE_OPTIONS: --max_old_space_size=3584
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
  script:
    - RAILS_ENV=production bundle exec rails c
    - RAILS_ENV=production PATH_TO_HIT="/users/sign_in" CUT_OFF=0 bundle exec derailed exec perf:mem || true; echo "after bundle"
  artifacts:
    paths:
      - log/production.log
      - config/
